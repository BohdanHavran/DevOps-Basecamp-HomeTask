pipeline {
    agent { label 'ubuntu' }
    environment{
        ID                = credentials("AWS_ACCESS_KEY_ID")
        KEY	              = credentials("AWS_SECRET_ACCESS_KEY")
    }
    stages {
        stage('Initialization Script') {
            steps {
                sh '''
                    cd Task9/Project-Script
                    sudo chmod +x Install_grafana.sh
                '''
            }
        }
        stage('Test Script') {
            steps {
                sh '''
                    cd Task9/Project-Script
                    ls -la
                    sudo ./Install_grafana.sh
                '''
            }
        }
        stage('Terraform init') {
            steps {
                sh '''
                    cd Task9/Terraform
                    terraform -version
                    sudo sed -i.bak "s@Your access_key@${ID}@g" providers.tf
                    sudo sed -i.bak "s@Your secret_key@${KEY}@g" providers.tf
                    terraform init
                '''
            }
        }
        stage('Terraform plan') {
            steps {
                sh '''
                    cd Task9/Terraform
                    terraform plan
                '''
            }
        }
        stage('Terraform apply') {
            when {
                anyOf {
                    branch "main"
                }
            }
            steps {
                sh '''
                    cd Task9/Terraform
                    terraform apply --auto-approve
                '''
            }
        }
        stage('Terraform destroy') {
            when {
                anyOf {
                    branch "main"
                }
            }
            steps {
                sh '''
                    cd Task9/Terraform
                    terraform destroy --auto-approve
                '''
            }
        }
    }
    post {
         success { 
            withCredentials([string(credentialsId: 'botSecret', variable: 'TOKEN'), string(credentialsId: 'chatId', variable: 'CHAT_ID')]) {
            sh  ("""
                curl -s -X POST https://api.telegram.org/bot${TOKEN}/sendMessage -d chat_id=${CHAT_ID} -d parse_mode=markdown -d text='*Full project name*: ${env.JOB_NAME} \n*Branch*: [$GIT_BRANCH]($GIT_URL) \n*Build* : [OK](${BUILD_URL}console)'
            """)
            }
         }

         aborted {
            withCredentials([string(credentialsId: 'botSecret', variable: 'TOKEN'), string(credentialsId: 'chatId', variable: 'CHAT_ID')]) {
            sh  ("""
                curl -s -X POST https://api.telegram.org/bot${TOKEN}/sendMessage -d chat_id=${CHAT_ID} -d parse_mode=markdown -d text='*Full project name*: ${env.JOB_NAME} \n*Branch*: [$GIT_BRANCH]($GIT_URL) \n*Build* : [Aborted](${BUILD_URL}console)'
            """)
            }

         }
         failure {
            withCredentials([string(credentialsId: 'botSecret', variable: 'TOKEN'), string(credentialsId: 'chatId', variable: 'CHAT_ID')]) {
            sh  ("""
                curl -s -X POST https://api.telegram.org/bot${TOKEN}/sendMessage -d chat_id=${CHAT_ID} -d parse_mode=markdown -d text='*Full project name*: ${env.JOB_NAME} \n*Branch*: [$GIT_BRANCH]($GIT_URL) \n*Build* : [Not OK](${BUILD_URL}console)'
            """)
            }
         }

    }

}
